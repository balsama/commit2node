<?php
/**
 * Implements hook_github_webhook_event().
 *
 * Hook fired when a payload is received from a GitHub Service hook.
 *
 * @param array $payload
 *   The parsed JSON that was sent by GitHub.
 * @param array &$response
 *   An array containing the JSON response returned to the server that invoked
 *   the webhook. The array is structured as follows:
 *   - status: Either "ok" or "error".
 *   - messages: An array of messages describing what happened.
 *   - ...: Any additional data that you want to pass to the invoking server.
 * @param array $args
 *   The arguments that are passed through wildcards in the path.
 *
 * @see github_webhook_payload()
 * @see https://help.github.com/articles/post-receive-hooks
 */
function commit2node_github_webhook_event($payload, &$response, $args) {
  // Check that our response is OK
  // ...

  if (is_array($payload['commits'])) {
    // This POST has to do with a commit, so we prepare the general data and
    // create a node for each commit in this push. (A single push can contain
    // many commits.)
    $repo = $payload['repository'];
    $refs = explode('/', $payload['ref']);
    $compare_url = $payload['compare'];
    foreach($payload['commits'] as $commit) {
      commit2node_create_commitnode($repo, $compare_url, $refs, $commit);
    }
    // No need to log that the node was created since node_save (within
    // commit2node_create_commitnode()) will log that for us.
  }
}

/**
 * Creates a new node from data provided by GitHub webhook.
 *
 * @param array $repo
 *   The repo section of the array posted by GitHub. This is the same for all
 *   commits in a single push.
 *
 * @param string $compare_url
 *   The location of the DIFF for the entire push. Again, same for all commits
 *   within a push.
 *
 * @param array $commit
 *   A single commit from the commits array posted by GitHub.
 *
 * @param array $refs
 *   The exploded value of the $payload['refs'] value passed by GitHub. This is
 *   apparently the only place you can find the branch! The last element in the
 *   array should contain the actual branch name.
 */
function commit2node_create_commitnode($repo, $compare_url, $refs, $commit) {
  $branch = array_pop($refs);

  $node = new stdClass();
  $node->type = 'commit';
  $node->title = truncate_utf8($commit['message'], 254, FALSE, TRUE);
  $node->language = LANGUAGE_NONE;
  $node->path = array('alias' => 'commit/' . $branch . '/' . $commit['id']);
  node_object_prepare($node);
  $node->uid = 1;

  // Custom field values
  $node->field_commit_author[$node->language][0]['value'] = $commit['author']['name'];
  $node->field_commit_message[$node->language][0]['value'] = $commit['message'];
  $node->field_commit_repository[$node->language][0]['value'] = $repo['name'];
  $node->field_commit_id[$node->language][0]['value'] = $commit['id'];
  $node->field_commit_compare_url[$node->language][0]['url'] = $compare_url;
  $node->field_repo_is_private[$node->language][0]['value'] = $repo['private'] ? 1:0;
  $node->field_commit_branch[$node->language][0]['value'] = $branch;

  // Prepare the node for submit
  $node = node_submit($node);

  // Save the node and return the new node's ID.
  if ($nid = node_save($node)) {
    return $nid;
  }

  // If we got this far, the node_save was unsuccessful for some reason.
  watchdog('commit2node', 'Saving commit as node encountered an error.');
  return FALSE;
}

